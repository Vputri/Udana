{"ast":null,"code":"var _jsxFileName = \"/home/vika/Documents/blog-strapi/frontend/src/components/Query/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Query = ({\n  children,\n  query,\n  slug\n}) => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(query, {\n    variables: {\n      slug: slug\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", JSON.stringify(error)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 21\n  }, this);\n  return children({\n    data\n  });\n};\n\n_s(Query, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n\n_c = Query;\nexport default Query;\n\nvar _c;\n\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"sources":["/home/vika/Documents/blog-strapi/frontend/src/components/Query/index.js"],"names":["React","useQuery","Query","children","query","slug","data","loading","error","variables","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA;AAAnB,CAAD,KAA+B;AAAA;;AAC3C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BP,QAAQ,CAACG,KAAD,EAAQ;AAC/CK,IAAAA,SAAS,EAAE;AAAEJ,MAAAA,IAAI,EAAEA;AAAR;AADoC,GAAR,CAAzC;AAIA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA,0BAAWE,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,SAAOL,QAAQ,CAAC;AAAEG,IAAAA;AAAF,GAAD,CAAf;AACD,CARD;;GAAMJ,K;UAC6BD,Q;;;KAD7BC,K;AAUN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nconst Query = ({ children, query, slug }) => {\n  const { data, loading, error } = useQuery(query, {\n    variables: { slug: slug }\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {JSON.stringify(error)}</p>;\n  return children({ data });\n};\n\nexport default Query;"]},"metadata":{},"sourceType":"module"}